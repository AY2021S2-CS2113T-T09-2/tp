@startuml
class seedu.duke.storage.datastorage.NotesStorage {
+ void saveData()
+ void loadData()
}
interface seedu.duke.storage.DataDecoder {
~ String[] decodeData(String)
}
interface seedu.duke.storage.DataEncoder {
~ ArrayList<String> encodeHistory(History)
~ ArrayList<String> encodeAlias(BlockAlias)
~ ArrayList<String> encodeNotes(NusMap)
~ ArrayList<String> encodeDailyRoute(DailyRoute)
~ ArrayList<String> encodeFavourite(Favourite)
}
class seedu.duke.storage.datastorage.DailyRouteStorage {
+ void saveData()
+ void loadData()
}
abstract class seedu.duke.storage.Storage {
# Path filepath
# NusMap nusMap
# BlockAlias blockAlias
# History history
# Favourite favourite
# DailyRoute dailyRoute
+ void createDirectory()
+ void createFile()
+ void setData(NusMap,BlockAlias,History,Favourite,DailyRoute)
+ void saveData()
+ void loadData()
}
class seedu.duke.storage.datastorage.FavouriteStorage {
+ void saveData()
+ void loadData()
}
class seedu.duke.storage.datastorage.HistoryStorage {
+ void saveData()
+ void loadData()
}
class seedu.duke.storage.datastorage.AliasStorage {
+ void saveData()
+ void loadData()
}


seedu.duke.storage.Storage <|-- seedu.duke.storage.datastorage.NotesStorage
seedu.duke.storage.Storage <|-- seedu.duke.storage.datastorage.DailyRouteStorage
seedu.duke.storage.DataEncoder <|.. seedu.duke.storage.Storage
seedu.duke.storage.DataDecoder <|.. seedu.duke.storage.Storage
seedu.duke.storage.Storage <|-- seedu.duke.storage.datastorage.FavouriteStorage
seedu.duke.storage.Storage <|-- seedu.duke.storage.datastorage.HistoryStorage
seedu.duke.storage.Storage <|-- seedu.duke.storage.datastorage.AliasStorage
@enduml